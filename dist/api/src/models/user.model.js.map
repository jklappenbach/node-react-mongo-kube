{"version":3,"sources":["../../../../api/src/models/user.model.js"],"names":["mongoose","require","Schema","bcrypt","SALT_WORK_FACTOR","UserSchema","username","type","String","required","index","unique","password","pre","next","user","isModified","genSalt","err","salt","hash","methods","comparePassword","candidatePassword","cb","compare","isMatch","module","exports","model"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,SAASF,SAASE,MAAxB;AACA,IAAMC,SAASF,QAAQ,QAAR,CAAf;AACA,IAAMG,mBAAmB,EAAzB;;AAEA,IAAIC,aAAa,IAAIH,MAAJ,CAAW;AAC1BI,YAAU;AACRC,UAAMC,MADE;AAERC,cAAU,IAFF;AAGRC,WAAO,EAAEC,QAAQ,IAAV;AAHC,GADgB;AAM1BC,YAAU,EAAEL,MAAMC,MAAR,EAAgBC,UAAU,IAA1B;AANgB,CAAX,CAAjB;;AASAJ,WAAWQ,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAe;AACpC,MAAIC,OAAO,IAAX;;AAEA;AACA,MAAI,CAACA,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EAAkC,OAAOF,MAAP;;AAElC;AACAX,SAAOc,OAAP,CAAeb,gBAAf,EAAiC,UAASc,GAAT,EAAcC,IAAd,EAAoB;AACnD,QAAID,GAAJ,EAAS,OAAOJ,KAAKI,GAAL,CAAP;;AAET;AACAf,WAAOiB,IAAP,CAAYL,KAAKH,QAAjB,EAA2BO,IAA3B,EAAiC,UAASD,GAAT,EAAcE,IAAd,EAAoB;AACnD,UAAIF,GAAJ,EAAS,OAAOJ,KAAKI,GAAL,CAAP;;AAET;AACAH,WAAKH,QAAL,GAAgBQ,IAAhB;AACAN;AACD,KAND;AAOD,GAXD;AAYD,CAnBD;;AAqBAT,WAAWgB,OAAX,CAAmBC,eAAnB,GAAqC,UAASC,iBAAT,EAA4BC,EAA5B,EAAgC;AACnErB,SAAOsB,OAAP,CAAeF,iBAAf,EAAkC,KAAKX,QAAvC,EAAiD,UAASM,GAAT,EAAcQ,OAAd,EAAuB;AACtE,QAAIR,GAAJ,EAAS,OAAOM,GAAGN,GAAH,CAAP;AACTM,OAAG,IAAH,EAASE,OAAT;AACD,GAHD;AAID,CALD;;AAOAC,OAAOC,OAAP,GAAiB5B,SAAS6B,KAAT,CAAe,MAAf,EAAuBxB,UAAvB,CAAjB","file":"user.model.js","sourcesContent":["const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\nconst bcrypt = require('bcrypt');\nconst SALT_WORK_FACTOR = 10;\n\nvar UserSchema = new Schema({\n  username: {\n    type: String,\n    required: true,\n    index: { unique: true }\n  },\n  password: { type: String, required: true }\n});\n\nUserSchema.pre('save', function(next) {\n  var user = this;\n\n  // only hash the password if it has been modified (or is new)\n  if (!user.isModified('password')) return next();\n\n  // generate a salt\n  bcrypt.genSalt(SALT_WORK_FACTOR, function(err, salt) {\n    if (err) return next(err);\n\n    // hash the password using our new salt\n    bcrypt.hash(user.password, salt, function(err, hash) {\n      if (err) return next(err);\n\n      // override the cleartext password with the hashed one\n      user.password = hash;\n      next();\n    });\n  });\n});\n\nUserSchema.methods.comparePassword = function(candidatePassword, cb) {\n  bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {\n    if (err) return cb(err);\n    cb(null, isMatch);\n  });\n};\n\nmodule.exports = mongoose.model('User', UserSchema);"]}